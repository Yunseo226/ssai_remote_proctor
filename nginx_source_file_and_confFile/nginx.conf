
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;
error_log  logs/error.log  debug; #"youngho" not working without debug setting at making executable

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /usr/local/nginx/logs/access.log;
    error_log /usr/local/nginx/logs/error.log;

    sendfile        off;
    tcp_nopush     on;
	directio 512;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80 default_server;
        server_name  snuonlinetest.net;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
		
		#redirect https setting
		if ($http_x_forwarded_proto != 'https') {
			return 301 https://$host$request_uri;
		}

        location /media/ {
			#disable cache
			add_header 'Cache-Control' 'no-cache';

			#CORS setup
			add_header 'Access-Control-Allow-Origin' '*' always;

			#allow CORS preflight requests
			if ($request_method = 'OPTIONS') {

				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain charset=UTF-8';
				add_header 'Contnet-Length' 0;

				return 204;
			}

            root  /;

            index  index.html index.htm;
        }
		

        location /hls_test/ {
			#disable cache
			add_header 'Cache-Control' 'no-cache';

			#CORS setup
			add_header 'Access-Control-Allow-Origin' '*' always;

			#allow CORS preflight requests
			if ($request_method = 'OPTIONS') {

				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain charset=UTF-8';
				add_header 'Contnet-Length' 0;

				return 204;
			}

            root  /var;

            index  index.html index.htm;
        }
        location / {
			#disable cache
			add_header 'Cache-Control' 'no-cache';

			#CORS setup
			add_header 'Access-Control-Allow-Origin' '*' always;

			#allow CORS preflight requests
			if ($request_method = 'OPTIONS') {

				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain charset=UTF-8';
				add_header 'Contnet-Length' 0;

				return 204;
			}
			proxy_pass http://127.0.0.1:3333;
			proxy_redirect off;
            #root   /var;

            index  index.html index.htm;
        }
		
		location /stat {
			rtmp_stat all;
			rtmp_stat_stylesheet stat.xsl;
		}

		location /stat.xsl {
		#xml stylesheet to view rtmp stats
			root /var/www/;
		}
		
#		location /index.html {
#			root /usr/local/nginx/html;
#		}

		location /index.html {

		    proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header HOST $http_host;
			proxy_set_header X-NginX-Proxy true;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			
			# port setting , 서버의 port와 동일한 port로 pass 시켜야 합니다.
			#proxy_pass http://localhost;
			proxy_redirect off;

			root /usr/local/nginx/html;
		}
	
		#allow 
		types {
			application/vnd.apple.mpegurl m3u8;
			video/mp2t ts;
			text/html html;
			#application/dash+xml mpd;
		}
	


        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }




    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

rtmp_auto_push on;

rtmp {
    server {
	    listen 1935 so_keepalive=off;
	    chunk_size 4096;
	    buflen 1s;
		ping 10s; #"youngho": check whether active connection is alive or not every 1 minute
		ping_timeout 5s; #"youngho": if active connectino can't be found for 30s, connection is closed 
	    timeout 10s; #"youngho": determine whether publisher still publishing or not 
	    max_streams 32; #"youngho": set numbers of rtmp streams 
						# this is not value of number of student clents connected. one clients can have more than two stereams like audio and video
		
		#"youngho": application for publish and upload to s3
	    application channel2 {
			push_reconnect 1s;
			interleave on;
			idle_streams off;
			live on;
			record off;
			#deny play 3.35.240.138;

			exec_push bash -c "/home/ubuntu/test.sh ${name}"; 

			#exec_publish_done bash -c "/var/hls/on_upload.sh ${name}";	
	    }

	    application record {
			live on;
			interleave on;
			
			record all;
			record_path /var/flvs;

			#record_max_size 5M;
			record_interval 10s;

			record_notify on;	#notify to publisher clients 
								#should learn NetStream.Record.Start 
			#record_unique on;
			
			record_suffix -%d-%b-%y-%T.flv;

			#"youngho" below is for fixing specific publisher
			#allow publish 147.47.7.65;
			#deny publish all;
			
			#"youngho" below is for setting directives after a recored file is created
			#"youngho" checked that multiple command is executed together 
			
			
			exec_record_done bash -c "/var/flvs/test.sh ${path} ${dirname} ${basename}";
			
			#exec_record_done bash -c "ffmpeg -y -i ${path} -acodec libmp3lame -ar 44100 -ac 1 -vcodec libx264 ${dirname}/${basename}.mp4 >> /var/flvs/ffmpeg 2>&1";
			#exec_record_done bash -c "echo ${basename} >> /var/flvs/filename";
			#exec_record_done bash -c "echo ${dirname} >> /var/flvs/dirname";


		
			#exec_play bash -c "echo $addr $pageurl >> /tmp/clinets";	
			#exec_publish bash -c "ffmpeg -hide_banner -y -fflags nobuffer -i rtmp://3.35.240.138:1935/channel1/youngho -vf scale=w=640:h=360:force_original_aspect_ratio=decrease -c:a aac -ar 48000 -c:v libx264 -preset veryfast -profile:v main -crf 20 -sc_threshold 0 -g 48 -keyint_min 48 -hls_time 4 -hls_list_size 6 -hls_flags delete_segments -max_muxing_queue_size 1024 -start_number 100 -b:v 800k -maxrate 856k -bufsize 1200k -b:a 96k -hls_segment_filename '/var/hls/file%03d.ts' /var/hls/360p.m3u8 >> /var/hls/ffmpeg.log 2>&1";
	    }

		#"youngho": for testing real time streaming 
	    application channel1 {
			live on;
			interleave on;

			#hls on;
			#hls_path /tmp/hls;
			#hls_fragment 15s;
			#dash on;
			#dash_path /tmp/dash;
			#dash_fragment 15s;
			#pull rtmp://tv2.example.com:443/root/new name=tv2 static;
			#push rtmp://3.35.240.138/live/mystream;
	    } 

		#"youngho": for testing real time streaming 
	    application webcam {
			live on;
			interleave on;

			#hls on;
			#hls_path /tmp/hls;
			#hls_fragment 15s;
			#dash on;
			#dash_path /tmp/dash;
			#dash_fragment 15s;
			#pull rtmp://tv2.example.com:443/root/new name=tv2 static;
			#push rtmp://3.35.240.138/live/mystream;
	    }

		#video on demand for mp4 files
		application vod {
			interleave on;
			play /var/flvs_test; 
		}
		
		#video on demand for m3u8, ts files
		application vod1 {
			interleave on;
			play /var; 
		}

		#hls streaming to viewer clients
		application hls {
			#deny play all; #disable consuming the stream from nginx as rtmp

			live on;
			interleave on;

			hls on;
			hls_path /var/hls_test;
			#hls_fragment 4s;
			hls_cleanup off;
			#hls_playlist_length 300m;
	
	   }
    }
}

